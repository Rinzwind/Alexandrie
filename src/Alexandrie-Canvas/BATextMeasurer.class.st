Class {
	#name : #BATextMeasurer,
	#superclass : #BlHostTextMeasurer,
	#instVars : [
		'lineAdvance'
	],
	#category : #'Alexandrie-Canvas-Text'
}

{ #category : #accessing }
BATextMeasurer >> canvas [

	^ self subclassResponsibility
]

{ #category : #dispatch }
BATextMeasurer >> measureTextParagraph: aBlTextParagraph [

	aBlTextParagraph measureOn: self
]

{ #category : #measurement }
BATextMeasurer >> measureTextSpan: aBlSpan [
	"Measure a given text span and return paragraph span with computed metrics"

	| fontAndStyleBuilder attributes paragraphSpan |
	"Collect font properties and text style from the attributes"
	fontAndStyleBuilder := BlTextFontAndStyleBuilder new.
	attributes := aBlSpan attributes.
	attributes do: [ :eachAttribute | eachAttribute applyOnFontAndStyleBuilder: fontAndStyleBuilder ].

	paragraphSpan := self createParagraphSpan.
	paragraphSpan span: aBlSpan.
	paragraphSpan updateMetricsWithBuilder: fontAndStyleBuilder.
	^ paragraphSpan
]

{ #category : #'paragraph span instance creation' }
BATextMeasurer >> newParagraphSpan [
	^ BATextParagraphSpan new
]
