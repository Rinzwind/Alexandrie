"
I represent FFI bindings to `hb_ot_name_id_predefined_t` enum: An integral type representing an OpenType 'name' table name identifier. There are predefined name IDs, as well as name IDs return from other API. These can be used to fetch name strings from a font face.

See: https://harfbuzz.github.io/harfbuzz-hb-ot-name.html#hb-ot-name-id-predefined-t
"
Class {
	#name : 'AeHbOpenTypePredefinedNameId',
	#superclass : 'AeEnumeration',
	#classVars : [
		'HB_OT_NAME_ID_CID_FINDFONT_NAME',
		'HB_OT_NAME_ID_COPYRIGHT',
		'HB_OT_NAME_ID_DARK_BACKGROUND',
		'HB_OT_NAME_ID_DESCRIPTION',
		'HB_OT_NAME_ID_DESIGNER',
		'HB_OT_NAME_ID_DESIGNER_URL',
		'HB_OT_NAME_ID_FONT_FAMILY',
		'HB_OT_NAME_ID_FONT_SUBFAMILY',
		'HB_OT_NAME_ID_FULL_NAME',
		'HB_OT_NAME_ID_LICENSE',
		'HB_OT_NAME_ID_LICENSE_URL',
		'HB_OT_NAME_ID_LIGHT_BACKGROUND',
		'HB_OT_NAME_ID_MAC_FULL_NAME',
		'HB_OT_NAME_ID_MANUFACTURER',
		'HB_OT_NAME_ID_POSTSCRIPT_NAME',
		'HB_OT_NAME_ID_SAMPLE_TEXT',
		'HB_OT_NAME_ID_TRADEMARK',
		'HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY',
		'HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY',
		'HB_OT_NAME_ID_UNIQUE_ID',
		'HB_OT_NAME_ID_VARIATIONS_PS_PREFIX',
		'HB_OT_NAME_ID_VENDOR_URL',
		'HB_OT_NAME_ID_VERSION_STRING',
		'HB_OT_NAME_ID_WWS_FAMILY',
		'HB_OT_NAME_ID_WWS_SUBFAMILY'
	],
	#category : 'Alexandrie-Harfbuzz-Enumerations',
	#package : 'Alexandrie-Harfbuzz',
	#tag : 'Enumerations'
}

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_CID_FINDFONT_NAME [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_CID_FINDFONT_NAME
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_COPYRIGHT [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_COPYRIGHT
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_DARK_BACKGROUND [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_DARK_BACKGROUND
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_DESCRIPTION [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_DESCRIPTION
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_DESIGNER [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_DESIGNER
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_DESIGNER_URL [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_DESIGNER_URL
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_FONT_FAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_FONT_FAMILY
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_FONT_SUBFAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_FONT_SUBFAMILY
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_FULL_NAME [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_FULL_NAME
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_LICENSE [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_LICENSE
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_LICENSE_URL [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_LICENSE_URL
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_LIGHT_BACKGROUND [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_LIGHT_BACKGROUND
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_MAC_FULL_NAME [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_MAC_FULL_NAME
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_MANUFACTURER [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_MANUFACTURER
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_POSTSCRIPT_NAME [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_POSTSCRIPT_NAME
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_SAMPLE_TEXT [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_SAMPLE_TEXT
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_TRADEMARK [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_TRADEMARK
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_UNIQUE_ID [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_UNIQUE_ID
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_VARIATIONS_PS_PREFIX [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_VARIATIONS_PS_PREFIX
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_VENDOR_URL [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_VENDOR_URL
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_VERSION_STRING [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_VERSION_STRING
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_WWS_FAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_WWS_FAMILY
]

{ #category : 'accessing enum' }
AeHbOpenTypePredefinedNameId class >> HB_OT_NAME_ID_WWS_SUBFAMILY [
	"This method was automatically generated"
	^ HB_OT_NAME_ID_WWS_SUBFAMILY
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> cidFindfontName [

	^ self HB_OT_NAME_ID_CID_FINDFONT_NAME
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> copyright [

	^ self HB_OT_NAME_ID_COPYRIGHT
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> darkBackground [

	^ self HB_OT_NAME_ID_DARK_BACKGROUND
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> description [

	^ self HB_OT_NAME_ID_DESCRIPTION
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> designer [

	^ self HB_OT_NAME_ID_DESIGNER
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> designerUrl [

	^ self HB_OT_NAME_ID_DESIGNER_URL
]

{ #category : 'enum declaration' }
AeHbOpenTypePredefinedNameId class >> enumDecl [
	"
	self rebuildEnumAccessors
	"

	^ #(
  HB_OT_NAME_ID_COPYRIGHT			0
  HB_OT_NAME_ID_FONT_FAMILY			1
  HB_OT_NAME_ID_FONT_SUBFAMILY		2
  HB_OT_NAME_ID_UNIQUE_ID			3
  HB_OT_NAME_ID_FULL_NAME			4
  HB_OT_NAME_ID_VERSION_STRING		5
  HB_OT_NAME_ID_POSTSCRIPT_NAME	6
  HB_OT_NAME_ID_TRADEMARK			7
  HB_OT_NAME_ID_MANUFACTURER		8
  HB_OT_NAME_ID_DESIGNER				9
  HB_OT_NAME_ID_DESCRIPTION			10
  HB_OT_NAME_ID_VENDOR_URL			11
  HB_OT_NAME_ID_DESIGNER_URL		12
  HB_OT_NAME_ID_LICENSE				13
  HB_OT_NAME_ID_LICENSE_URL			14
  HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY		16
  HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY	17
  HB_OT_NAME_ID_MAC_FULL_NAME				18
  HB_OT_NAME_ID_SAMPLE_TEXT			19
  HB_OT_NAME_ID_CID_FINDFONT_NAME	20
  HB_OT_NAME_ID_WWS_FAMILY			21
  HB_OT_NAME_ID_WWS_SUBFAMILY		22
  HB_OT_NAME_ID_LIGHT_BACKGROUND	23
  HB_OT_NAME_ID_DARK_BACKGROUND		24
  HB_OT_NAME_ID_VARIATIONS_PS_PREFIX	25)
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> fontFamily [

	^ self HB_OT_NAME_ID_FONT_FAMILY
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> fontSubfamily [

	^ self HB_OT_NAME_ID_FONT_SUBFAMILY
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> fullName [

	^ self HB_OT_NAME_ID_FULL_NAME
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> license [

	^ self HB_OT_NAME_ID_LICENSE
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> licenseUrl [

	^ self HB_OT_NAME_ID_LICENSE_URL
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> lightBackground [

	^ self HB_OT_NAME_ID_LIGHT_BACKGROUND
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> macFullName [

	^ self HB_OT_NAME_ID_MAC_FULL_NAME
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> manufacturer [

	^ self HB_OT_NAME_ID_MANUFACTURER
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> postscriptName [

	^ self HB_OT_NAME_ID_POSTSCRIPT_NAME
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> sampleText [

	^ self HB_OT_NAME_ID_SAMPLE_TEXT
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> trademark [

	^ self HB_OT_NAME_ID_TRADEMARK
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> typographicFamily [

	^ self HB_OT_NAME_ID_TYPOGRAPHIC_FAMILY
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> typographicSubfamily [

	^ self HB_OT_NAME_ID_TYPOGRAPHIC_SUBFAMILY
]

{ #category : 'hook' }
AeHbOpenTypePredefinedNameId class >> underlinedNamePrefix [
	
	^ 'HB_OT_NAME_ID_'
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> uniqueId [

	^ self HB_OT_NAME_ID_UNIQUE_ID
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> variationsPsPrefix [

	^ self HB_OT_NAME_ID_VARIATIONS_PS_PREFIX
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> vendorUrl [

	^ self HB_OT_NAME_ID_VENDOR_URL
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> versionString [

	^ self HB_OT_NAME_ID_VERSION_STRING
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> wwsFamily [

	^ self HB_OT_NAME_ID_WWS_FAMILY
]

{ #category : 'accessing enum camelcased' }
AeHbOpenTypePredefinedNameId class >> wwsSubfamily [

	^ self HB_OT_NAME_ID_WWS_SUBFAMILY
]

{ #category : 'converting' }
AeHbOpenTypePredefinedNameId >> asInteger [
	^ self value
]
